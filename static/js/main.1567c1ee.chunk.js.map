{"version":3,"sources":["action/types.js","action/arrayAction.js","action/algorithms/selectionSort.js","action/algorithms/insertionSort.js","action/algorithms/bubbleSort.js","action/algorithms/binaryInsertionSort.js","action/algorithms/mergeSort.js","action/algorithms/cocktailSort.js","action/algorithms/quickSort.js","action/algorithms/heapSort.js","action/algorithms/radixSort.js","components/Navbar/navbar.jsx","components/ArrayContainer/arrayContainer.jsx","virtualizationApp.js","reducers/array.js","reducers/index.js","reducers/speed.js","reducers/algorithm.js","reducers/currenState.js","reducers/shape.js","reducers/mode.js","store.js","index.js"],"names":["SWAP_ARRAY","TOGGLE_STATE","maxHeight","window","screen","height","getRandomInt","min","max","Math","ceil","floor","random","setArray","size","dispatch","array","i","push","type","payload","sleep","ms","Promise","resolve","setTimeout","selectionSort","getState","a","shape","temp","mode","document","getElementById","style","backgroundColor","j","speed","curState","binaryInsertionSort","left","right","mid","mergeSortRecur","l","r","m","merge","n1","n2","L","Array","R","k","mergeSort","disp","getSt","sort","low","high","partition","pivot","h","quickSort","heapSort","newJ","NavBar","sizeChange","props","arrayChanged","value","speedChange","speedChanged","startSelected","toggleState","algorithm","selection_sort","bubble_sort","insertion_sort","binary_insertion_sort","cocktail_sort","merge_sort","quick_sort","heap_sort","radix_sort","this","algorithmChanged","Navbar","collapseOnSelect","expand","bg","variant","className","Brand","href","alt","src","width","Toggle","aria-controls","Collapse","id","Nav","Link","OverlayTrigger","overlay","Tooltip","defaultValue","onInput","disabled","NavDropdown","title","Item","onClick","ButtonGroup","aria-label","Button","shapeChanged","modeChanged","Component","connect","state","swapped","count","mx","c","length","PRIMARY_COLOR","ArrayContainer","screenWidth","barWidth","widthStyle","map","index","key","VirtualizationApp","Fragment","initialState","rootReducer","combineReducers","action","configureStore","createStore","applyMiddleware","thunk","ReactDOM","render","store"],"mappings":"yRAGaA,EAAa,aAEbC,EAAe,eCHtBC,EAAmC,IAAvBC,OAAOC,OAAOC,OAmBhC,SAASC,EAAaC,EAAKC,GAGzB,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,EAGxCM,MAvBE,SAAAC,GACf,OAAO,SAAAC,GAEL,IADA,IAAMC,EAAQ,GACLC,EAAI,EAAGA,EAAIH,IAAQG,EAC1BD,EAAME,KAAKZ,EAAa,GAAIJ,IAG9Ba,EAAS,CACPI,KDZsB,eCatBC,QAAS,CACPJ,MAAOA,EACPF,KAAMA,O,8BC+Cd,SAASO,EAAMC,GACb,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAGrCI,MAhEf,WACE,8CAAO,WAAOX,EAAUY,GAAjB,2BAAAC,EAAA,sDACCZ,EAAQW,IAAWX,MAAMA,MACzBF,EAAOa,IAAWX,MAAMF,KACxBe,EAAQF,IAAWE,MACrBtB,EAAM,EACRuB,EAAO,EACAb,EAAI,EANR,YAMWA,EAAIH,GANf,iBAOHP,EAAMU,EACFU,IAAWI,OACbC,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CtB,IAAO2B,MAAMC,gBACrD,SAEKC,EAAInB,EAAI,EAZd,YAYiBmB,EAAItB,GAZrB,qBAaGa,IAAWI,KAbd,wBAcCC,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CO,IAAKF,MAAMC,gBACnD,MAfH,UAgBOd,EAAMM,IAAWU,OAhBxB,QAiBCL,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CO,IAAKF,MAAMC,gBACnD,QAlBH,WAoBGnB,EAAMoB,GAAKpB,EAAMT,KACfoB,IAAWI,OACbC,SAASC,eAAT,gBACWJ,EADX,YACoBtB,IAClB2B,MAAMC,gBAAkB,SAE5B5B,EAAM6B,EACFT,IAAWI,OACbC,SAASC,eAAT,gBACWJ,EADX,YACoBtB,IAClB2B,MAAMC,gBAAkB,UAGzBR,IAAWW,SAjCf,uDAY6BF,EAZ7B,8BAqCHJ,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CtB,IAAO2B,MAAMC,gBACrD,QACFL,EAAOd,EAAMC,GACbD,EAAMC,GAAKD,EAAMT,GACjBS,EAAMT,GAAOuB,EAzCV,UA0CGf,EAAS,CACbI,KAAMnB,EACNgB,MAAM,YAAKA,KA5CV,WA8CEW,IAAWI,KA9Cb,kCA+CKV,EAAMM,IAAWU,OA/CtB,WAiDEV,IAAWW,SAjDb,uDAMuBrB,EANvB,uBAqDDU,IAAWW,UACbvB,EAAS,CAAEI,KAAMlB,IAtDd,4CAAP,qDAAM,ICkDR,SAASoB,EAAMC,GACb,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MCJpD,SAASD,EAAMC,GACb,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MCoBpD,SAASD,EAAMC,GACb,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAGrCiB,ICzEXxB,EAAUY,EAAUE,EDyETU,EAzEf,WACE,8CAAO,WAAOxB,EAAUY,GAAjB,6BAAAC,EAAA,sDACCZ,EAAQW,IAAWX,MAAMA,MACzBF,EAAOa,IAAWX,MAAMF,KACxBe,EAAQF,IAAWE,MACrBC,EAAO,EACTU,EAAO,EACPC,EAAQ,EACRC,EAAM,EAECzB,EAAI,EATR,YASWA,EAAIH,GATf,iBAUH0B,EAAO,EACPC,EAAQxB,EAXL,YAaIuB,EAAOC,GAbX,oBAcDC,EAAMjC,KAAKE,OAAO6B,EAAOC,GAAS,IAC9Bd,IAAWI,KAfd,wBAgBCC,SAASC,eAAT,gBACWJ,EADX,YACoBa,IAClBR,MAAMC,gBAAkB,MAlB3B,UAmBOd,EAAMM,IAAWU,OAnBxB,QAoBCL,SAASC,eAAT,gBACWJ,EADX,YACoBa,IAClBR,MAAMC,gBAAkB,QAtB3B,WAwBGnB,EAAMC,IAAMD,EAAM0B,GACpBD,EAAQC,EAERF,EAAOE,EAAM,EAEVf,IAAWW,SA7Bf,yFAkCQE,EAAOvB,GAlCf,oBAmCDa,EAAOd,EAAMwB,GACbxB,EAAMwB,GAAQxB,EAAMC,GACpBD,EAAMC,GAAKa,GACPH,IAAWI,KAtCd,wBAuCCC,SAASC,eAAT,gBACWJ,EADX,YACoBW,IAClBN,MAAMC,gBAAkB,QAzC3B,UA0COd,EAAMM,IAAWU,OA1CxB,QA2CCL,SAASC,eAAT,gBACWJ,EADX,YACoBW,IAClBN,MAAMC,gBAAkB,QA7C3B,WA+CIR,IAAWW,SA/Cf,uDAkCoBE,EAlCpB,2BAmDHzB,EAAS,CACPI,KAAMnB,EACNgB,MAAM,YAAKA,KAERW,IAAWI,KAvDb,kCAwDKV,EAAMM,IAAWU,OAxDtB,WA0DEV,IAAWW,SA1Db,uDASuBrB,EATvB,uBA8DDU,IAAWW,UACbvB,EAAS,CAAEI,KAAMlB,IA/Dd,4CAAP,qDAAM,IEsFR,SAASoB,EAAMC,GACb,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,M,SDtErCqB,E,kFAAf,WAA8B3B,EAAO4B,EAAGC,GAAxC,eAAAjB,EAAA,2DACMgB,EAAIC,GADV,wBAEQC,EAAIrC,KAAKE,OAAOiC,EAAIC,GAAK,GAFjC,SAGUF,EAAe3B,EAAO4B,EAAGE,GAHnC,UAISnB,IAAWW,SAJpB,iEAOUK,EAAe3B,EAAO8B,EAAI,EAAGD,GAPvC,UAQSlB,IAAWW,SARpB,oEAWUS,EAAM/B,EAAO4B,EAAGE,EAAGD,GAX7B,WAYSlB,IAAWW,SAZpB,wF,+BAkBeS,E,oFAAf,WAAqB/B,EAAO4B,EAAGE,EAAGD,GAAlC,6BAAAjB,EAAA,sDACMoB,EAAKF,EAAIF,EAAI,EACbK,EAAKJ,EAAIC,EAETI,EAAI,IAAIC,MAAMH,GACdI,EAAI,IAAID,MAAMF,GAEThC,EAAI,EAPf,YAOkBA,EAAIgC,GAPtB,oBAQIC,EAAEjC,GAAKD,EAAM4B,EAAI3B,GACjBmC,EAAEnC,GAAKD,EAAM8B,EAAI,EAAI7B,IACjBU,IAAWI,KAVnB,wBAWMC,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0Ce,EAAI3B,IAAKiB,MAAMC,gBACvD,MACFH,SAASC,eAAT,gBACWJ,EADX,YACoBiB,EAAI,EAAI7B,IAC1BiB,MAAMC,gBAAkB,MAfhC,UAgBYd,EAAMM,IAAWU,OAhB7B,QAiBML,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0Ce,EAAI3B,IAAKiB,MAAMC,gBACvD,QACFH,SAASC,eAAT,gBACWJ,EADX,YACoBiB,EAAI,EAAI7B,IAC1BiB,MAAMC,gBAAkB,QArBhC,WAuBSR,IAAWW,SAvBpB,uDAO4BrB,EAP5B,uBA4BM+B,IAAOC,IACTC,EAAEF,EAAK,GAAKhC,EAAM4B,EAAII,EAAK,IAGzB/B,EAAI,EACNmB,EAAI,EACJiB,EAAIT,EAlCR,aAmCS3B,EAAI+B,GAAMZ,EAAIa,GAnCvB,oBAoCQC,EAAEjC,IAAMmC,EAAEhB,GACZpB,EAAMqC,GAAKH,EAAEjC,KAEbD,EAAMqC,GAAKD,EAAEhB,MAEXT,IAAWI,KAzCnB,wBA0CMC,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CwB,IAAKnB,MAAMC,gBACnD,MA3CR,UA4CYd,EAAMM,IAAWU,OA5C7B,QA6CML,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CwB,IAAKnB,MAAMC,gBACnD,QA9CR,aAgDMkB,EACFtC,EAAS,CACPI,KAAMnB,EACNgB,MAAM,YAAKA,KAERW,IAAWI,KArDpB,kCAsDYV,EAAMM,IAAWU,OAtD7B,WAwDSV,IAAWW,SAxDpB,kFA6DSrB,EAAI+B,GA7Db,wBA8DIhC,EAAMqC,GAAKH,EAAEjC,KACboC,IACAtC,EAAS,CACPI,KAAMnB,EACNgB,MAAM,YAAKA,KAlEjB,UAoEUK,EAAMM,IAAWU,OApE3B,WAqESV,IAAWW,SArEpB,kFA0ESF,EAAIa,GA1Eb,wBA2EIjC,EAAMqC,GAAKD,EAAEhB,KACbiB,IACAtC,EAAS,CACPI,KAAMnB,EACNgB,MAAM,YAAKA,KA/EjB,UAiFUK,EAAMM,IAAWU,OAjF3B,WAkFSV,IAAWW,SAlFpB,kH,sBAwFA,SAASjB,EAAMC,GACb,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAGrCgC,IEhIXvC,EAAUY,EAAUE,EFgITyB,EA9Hf,WAEE,8CAAO,WAAOC,EAAMC,GAAb,iBAAA5B,EAAA,6DACLb,EAAWwC,EAEX1B,GADAF,EAAW6B,KACQ3B,MACbb,EAJD,YAIaW,IAAWX,MAAMA,OAC7BF,EAAOa,IAAWX,MAAMF,KALzB,SAMC6B,EAAe3B,EAAO,EAAGF,EAAO,GANjC,OAODa,IAAWW,UACbvB,EAAS,CAAEI,KAAMlB,IARd,2CAAP,qDAAM,I,SEYOwD,E,kFAAf,WAAoBzC,EAAO0C,EAAKC,GAAhC,eAAA/B,EAAA,2DACM8B,EAAMC,GADZ,iCAEsBC,EAAU5C,EAAO0C,EAAKC,GAF5C,UAEQE,EAFR,OAGSlC,IAAWW,SAHpB,iEAMUmB,EAAKzC,EAAO0C,EAAKG,GAN3B,UAOSlC,IAAWW,SAPpB,oEAUUmB,EAAKzC,EAAO6C,EAAQ,EAAGF,GAVjC,WAWShC,IAAWW,SAXpB,wF,+BAiBesB,E,kFAAf,WAAyB5C,EAAO0C,EAAKC,GAArC,qBAAA/B,EAAA,sDACMiC,EAAQ7C,EAAMP,KAAKE,OAAO+C,EAAMC,GAAQ,IAC1C7B,EAAO,EACPc,EAAIc,EAAM,EACVI,EAAIH,EAAO,EAJf,qBAQQf,GACEjB,IAAWI,KATrB,uBAUQC,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0Ce,IAAKV,MAAMC,gBACnD,MAXV,SAYcd,EAAMM,IAAWU,OAZ/B,OAaQL,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0Ce,IAAKV,MAAMC,gBACnD,QAdV,UAgBWR,IAAWW,SAhBtB,wDAmBatB,EAAM4B,GAAKiB,EAnBxB,6BAqBQC,GACEnC,IAAWI,KAtBrB,wBAuBQC,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CiC,IAAK5B,MAAMC,gBACnD,MAxBV,UAyBcd,EAAMM,IAAWU,OAzB/B,QA0BQL,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CiC,IAAK5B,MAAMC,gBACnD,QA3BV,WA6BWR,IAAWW,SA7BtB,wDAgCatB,EAAM8C,GAAKD,EAhCxB,8BAiCQjB,GAAKkB,GAjCb,wDAoCIhC,EAAOd,EAAM4B,GACb5B,EAAM4B,GAAK5B,EAAM8C,GACjB9C,EAAM8C,GAAKhC,EACXf,EAAS,CACPI,KAAMnB,EACNgB,MAAM,YAAKA,KAERW,IAAWI,KA3CpB,kCA4CYV,EAAMM,IAAWU,OA5C7B,WA8CSV,IAAWW,SA9CpB,qGAkDSwB,GAlDT,6C,sBAqDA,SAASzC,EAAMC,GACb,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAGrCyC,MAxFf,WACE,8CAAO,WAAOR,EAAMC,GAAb,iBAAA5B,EAAA,6DACLb,EAAWwC,EAEX1B,GADAF,EAAW6B,KACQ3B,MACfb,EAJC,YAIWW,IAAWX,MAAMA,OAC7BF,EAAOa,IAAWX,MAAMF,KALvB,SAMC2C,EAAKzC,EAAO,EAAGF,EAAO,GANvB,OAODa,IAAWW,UACbvB,EAAS,CAAEI,KAAMlB,IARd,2CAAP,qDAAM,ICwIR,SAASoB,GAAMC,GACb,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAGrC0C,OA/If,WACE,8CAAO,WAAOjD,EAAUY,GAAjB,iCAAAC,EAAA,sDACDZ,EADC,YACWW,IAAWX,MAAMA,OAC7BF,EAAOa,IAAWX,MAAMF,KACtBe,EAAQF,IAAWE,MAEhBZ,EAAIR,KAAKE,MAAMG,EAAO,EAAI,GAL9B,YAKkCG,GAAK,GALvC,iBAMHmB,EAAI6B,EAAOhD,EACPU,IAAWI,OACbC,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CZ,IAAKiB,MAAMC,gBACnD,SATD,YAWIC,EAAItB,GAXR,oBAYDmD,EAAO7B,EAEPK,EAAY,EAAJL,EAAQ,GADhBI,EAAW,EAAJJ,EAAQ,GAEJtB,GAAQE,EAAMwB,GAAQxB,EAAMiD,KACrCA,EAAOzB,EACHb,IAAWI,OACbC,SAASC,eAAT,gBACWJ,EADX,YACoBW,IAClBN,MAAMC,gBAAkB,QAI1BM,EAAQ3B,GAAQE,EAAMyB,GAASzB,EAAMiD,KACnCtC,IAAWI,OACbC,SAASC,eAAT,gBACWJ,EADX,YACoBW,IAClBN,MAAMC,gBAAkB,SAE5B8B,EAAOxB,EACHd,IAAWI,OACbC,SAASC,eAAT,gBACWJ,EADX,YACoBoC,IAClB/B,MAAMC,gBAAkB,QAG1B8B,IAAS7B,EArCZ,qBAsCKT,IAAWI,KAtChB,kCAuCSV,GAAMM,IAAWU,OAvC1B,QAyCGL,SAASC,eAAT,gBACWJ,EADX,YACoBoC,IAClB/B,MAAMC,gBAAkB,QA3C7B,WA6CCL,EAAOd,EAAMoB,GACbpB,EAAMoB,GAAKpB,EAAMiD,GACjBjD,EAAMiD,GAAQnC,EACdM,EAAI6B,EACJlD,EAAS,CACPI,KAAMnB,EACNgB,MAAM,YAAKA,KAERW,IAAWI,KArDjB,kCAsDSV,GAAMM,IAAWU,OAtD1B,uEA2DIV,IAAWW,SA3Df,+EA+DHN,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CZ,IAAKiB,MAAMC,gBACnD,QACGR,IAAWW,SAjEb,uDAK4CrB,EAL5C,uBAsEIA,EAAIH,EAAO,EAtEf,aAsEkBG,GAAK,GAtEvB,oBAuEHa,EAAOd,EAAMC,GACbD,EAAMC,GAAKD,EAAM,GACjBA,EAAM,GAAKc,EACXf,EAAS,CACPI,KAAMnB,EACNgB,MAAM,YAAKA,KAERW,IAAWI,KA9Eb,kCA+EKV,GAAMM,IAAWU,OA/EtB,QAiFHD,EAAI6B,EAAO,EACPtC,IAAWI,OACbC,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CZ,IAAKiB,MAAMC,gBACnD,SApFD,aAsFIC,EAAInB,GAtFR,oBAuFDgD,EAAO7B,EACPI,EAAW,EAAJJ,EAAQ,EACfK,EAAY,EAAJL,EAAQ,EACZT,IAAWI,OACbC,SAASC,eAAT,gBACWJ,EADX,YACoBoC,IAClB/B,MAAMC,gBAAkB,OAExBK,EAAOvB,GAAKD,EAAMwB,GAAQxB,EAAMiD,KAClCA,EAAOzB,GAGLC,EAAQxB,GAAKD,EAAMyB,GAASzB,EAAMiD,KACpCA,EAAOxB,IAELd,IAAWI,KAtGd,kCAuGOV,GAAMM,IAAWU,OAvGxB,QAwGCL,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CO,IAAKF,MAAMC,gBACnD,QAzGH,WA2GG8B,IAAS7B,EA3GZ,oBA4GCN,EAAOd,EAAMoB,GACbpB,EAAMoB,GAAKpB,EAAMiD,GACjBjD,EAAMiD,GAAQnC,EACdM,EAAI6B,EACJlD,EAAS,CACPI,KAAMnB,EACNgB,MAAM,YAAKA,KAERW,IAAWI,KApHjB,kCAqHSV,GAAMM,IAAWU,OArH1B,uEA0HIV,IAAWW,SA1Hf,gFA8HHN,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CZ,IAAKiB,MAAMC,gBACnD,QACGR,IAAWW,SAhIb,uDAsE4BrB,EAtE5B,wBAoIDU,IAAWW,UACbvB,EAAS,CAAEI,KAAMlB,IArId,4CAAP,qDAAM,ICqER,SAASoB,GAAMC,GACb,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,M,UC/C9C4C,G,2MAKJC,WAAa,WACX,EAAKC,MAAMC,aAAarC,SAASC,eAAe,cAAcqC,Q,EAGhEC,YAAc,WACZ,EAAKH,MAAMI,aAAaxC,SAASC,eAAe,SAASqC,Q,EAG3DG,cAAgB,WAEd,OADA,EAAKL,MAAMM,cACH,EAAKN,MAAMO,WACjB,IAAK,iBAEH,YADA,EAAKP,MAAMQ,iBAEb,IAAK,cAEH,YADA,EAAKR,MAAMS,cAEb,IAAK,iBAEH,YADA,EAAKT,MAAMU,iBAEb,IAAK,wBAEH,YADA,EAAKV,MAAMW,wBAEb,IAAK,gBAEH,YADA,EAAKX,MAAMY,gBAEb,IAAK,aAEH,YADA,EAAKZ,MAAMa,aAEb,IAAK,aAEH,YADA,EAAKb,MAAMc,aAEb,IAAK,YAEH,YADA,EAAKd,MAAMe,YAEb,IAAK,aAEH,YADA,EAAKf,MAAMgB,aAEb,QACE,S,mFA1CJC,KAAKjB,MAAMC,aAAagB,KAAKjB,MAAMtD,Q,+BA8C3B,IAAD,SACmCuE,KAAKjB,MAAvCtD,EADD,EACCA,KAAMuB,EADP,EACOA,MAAOiD,EADd,EACcA,iBAErB,OACE,kBAACC,EAAA,EAAD,CACEC,kBAAgB,EAChBC,OAAO,KACPC,GAAG,OACHC,QAAQ,OACRC,UAAU,gBAEV,kBAACL,EAAA,EAAOM,MAAR,CAAcC,KAAK,IAChB,sBACD,yBACEC,IAAI,GACJC,IAAI,6EACJC,MAAM,KACN5F,OAAO,KACPuF,UAAU,6CAGd,kBAACL,EAAA,EAAOW,OAAR,CAAeC,gBAAc,0BAC7B,kBAACZ,EAAA,EAAOa,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,CAAKV,UAAU,WACb,kBAACU,EAAA,EAAIC,KAAL,CAAUT,KAAK,IAAf,cACA,kBAACU,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAASL,GAAG,gBAAgBvF,IAErC,2BACEK,KAAK,QACLyE,UAAU,eACVS,GAAG,aACH9F,IAAI,IACJC,IAAKC,KAAKE,OAAOR,OAAOC,OAAO6F,MAAQ,KAAO,MAC9CU,aAAc7F,EACd8F,QAAS,kBAAM,EAAKzC,cACpB0C,SAAUxB,KAAKjB,MAAM9B,YAGzB,kBAACgE,EAAA,EAAIC,KAAL,CAAUT,KAAK,IAAf,iBACA,kBAACU,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAASL,GAAG,gBAAZ,IAA6BhE,EAA7B,OAET,2BACElB,KAAK,QACLyE,UAAU,eACVS,GAAG,QACH9F,IAAI,IACJC,IAAI,MACJmG,aAActE,EACduE,QAAS,kBAAM,EAAKrC,kBAGxB,kBAACuC,EAAA,EAAD,CAAaC,MAAM,aAAaV,GAAG,2BACjC,kBAACS,EAAA,EAAYE,KAAb,CACEC,QAAS,kBAAM3B,EAAiB,oBADlC,kBAKA,kBAACwB,EAAA,EAAYE,KAAb,CAAkBC,QAAS,kBAAM3B,EAAiB,iBAAlD,eAGA,kBAACwB,EAAA,EAAYE,KAAb,CACEC,QAAS,kBAAM3B,EAAiB,oBADlC,kBAKA,kBAACwB,EAAA,EAAYE,KAAb,CACEC,QAAS,kBAAM3B,EAAiB,2BADlC,yBAKA,kBAACwB,EAAA,EAAYE,KAAb,CACEC,QAAS,kBAAM3B,EAAiB,mBADlC,iBAKA,kBAACwB,EAAA,EAAYE,KAAb,CAAkBC,QAAS,kBAAM3B,EAAiB,gBAAlD,cAGA,kBAACwB,EAAA,EAAYE,KAAb,CAAkBC,QAAS,kBAAM3B,EAAiB,gBAAlD,cAGA,kBAACwB,EAAA,EAAYE,KAAb,CAAkBC,QAAS,kBAAM3B,EAAiB,eAAlD,aAGA,kBAACwB,EAAA,EAAYE,KAAb,CAAkBC,QAAS,kBAAM3B,EAAiB,gBAAlD,eAIF,kBAAC4B,EAAA,EAAD,CAAaC,aAAW,SACtB,kBAACC,EAAA,EAAD,CACEzB,QAAQ,OACRsB,QAAS,kBAAM,EAAK7C,MAAMiD,aAAa,QACvCR,SAAUxB,KAAKjB,MAAM9B,UAHvB,OAOA,kBAAC8E,EAAA,EAAD,CACEzB,QAAQ,OACRsB,QAAS,kBAAM,EAAK7C,MAAMiD,aAAa,QACvCR,SAAUxB,KAAKjB,MAAM9B,UAHvB,QAQF,kBAAC4E,EAAA,EAAD,CAAaC,aAAW,QACtB,kBAACC,EAAA,EAAD,CACEzB,QAAQ,OACRsB,QAAS,WACP,EAAK7C,MAAMkD,aAAY,KAH3B,eAQA,kBAACF,EAAA,EAAD,CACEzB,QAAQ,OACRsB,QAAS,WACP,EAAK7C,MAAMkD,aAAY,KAH3B,iBASF,kBAACJ,EAAA,EAAD,CAAaC,aAAW,cACtB,kBAACC,EAAA,EAAD,CACEzB,QAAQ,OACRsB,QAAS,kBAAM,EAAKxC,iBACpBoC,SAAUxB,KAAKjB,MAAM9B,UAHvB,SAOA,kBAAC8E,EAAA,EAAD,CACEzB,QAAQ,OACRsB,QAAS,kBAAM,EAAK7C,MAAMM,eAC1BmC,UAAWxB,KAAKjB,MAAM9B,UAHxB,gB,GApLOiF,aA6PNC,gBA1DS,SAAAC,GAAK,MAAK,CAChCzG,MAAOyG,EAAMzG,MAAMA,MACnBF,KAAM2G,EAAMzG,MAAMF,KAClBuB,MAAOoF,EAAMpF,MACbsC,UAAW8C,EAAM9C,UACjBrC,SAAUmF,EAAMnF,aAGQ,SAAAvB,GACxB,MAAO,CACLsD,aAAc,SAAAvD,GACZC,EAASF,EAASC,KAEpBwE,iBAAkB,SAAAX,GAChB5D,EAAS,CAAEI,KAAM,mBAAoBwD,UAAWA,KAElDH,aAAc,SAAAnC,GACZtB,EAAS,CAAEI,KAAM,eAAgBkB,MAAOA,KAE1CgF,aAAc,SAAAxF,GACZd,EAAS,CAAEI,KX3OW,eW2OSU,MAAOA,KAExCyF,YAAa,SAAAvF,GACXhB,EAAS,CAAEI,KX7OU,cW6OSY,KAAMA,KAEtC2C,YAAa,WACX3D,EAAS,CAAEI,KAAMlB,KAEnB2E,eAAgB,WACd7D,EAASW,MAEXoD,eAAgB,WACd/D,ER1PJ,uCAAO,WAAOA,EAAUY,GAAjB,yBAAAC,EAAA,sDACCZ,EADD,YACaW,IAAWX,MAAMA,OAC7BF,EAAOa,IAAWX,MAAMF,KACxBe,EAAQF,IAAWE,MACrBC,EAAO,EACTM,EAAI,EAEGnB,EAAI,EAPR,YAOWA,EAAIH,GAPf,iBAQHsB,EAAInB,EARD,YAUImB,EAAI,GAAKpB,EAAMoB,GAAKpB,EAAMoB,EAAI,IAVlC,qBAWGT,IAAWI,KAXd,wBAYCC,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CO,IAAKF,MAAMC,gBACnD,MAbH,UAcOd,EAAMM,IAAWU,OAdxB,QAeCL,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CO,IAAKF,MAAMC,gBACnD,QAhBH,WAkBDL,EAAOd,EAAMoB,GACbpB,EAAMoB,GAAKpB,EAAMoB,EAAI,GACrBpB,EAAMoB,EAAI,GAAKN,IACbM,EACFrB,EAAS,CACPI,KAAMnB,EACNgB,MAAM,YAAKA,MAETW,IAAWI,KA1Bd,kCA2BOV,EAAMM,IAAWU,OA3BxB,WA6BIV,IAAWW,SA7Bf,+EAiCHvB,EAAS,CACPI,KAAMnB,EACNgB,MAAM,YAAKA,KAERW,IAAWI,KArCb,kCAsCKV,EAAMM,IAAWU,OAtCtB,WAwCEV,IAAWW,SAxCb,uDAOuBrB,EAPvB,uBA4CDU,IAAWW,UACbvB,EAAS,CAAEI,KAAMlB,IA7Cd,4CAAP,qDAAM,KQ4PJ4E,YAAa,WACX9D,EP7PJ,uCAAO,WAAOA,EAAUY,GAAjB,yBAAAC,EAAA,sDACCZ,EADD,YACaW,IAAWX,MAAMA,OAC7BF,EAAOa,IAAWX,MAAMF,KACxBe,EAAQF,IAAWE,MACrBC,EAAO,EAEFb,EAAI,EANR,YAMWA,EAAIH,EAAO,GANtB,iBAOMsB,EAAI,EAPV,YAOaA,EAAItB,EAAOG,EAAI,GAP5B,oBAQGD,EAAMoB,GAAKpB,EAAMoB,EAAI,KACvBN,EAAOd,EAAMoB,GACbpB,EAAMoB,GAAKpB,EAAMoB,EAAI,GACrBpB,EAAMoB,EAAI,GAAKN,IAEbH,IAAWI,KAbd,wBAcCC,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CO,IAAKF,MAAMC,gBACnD,MACFH,SAASC,eAAT,gBACWJ,EADX,YACoBO,EAAI,IACtBF,MAAMC,gBAAkB,MAlB3B,UAmBOd,EAAMM,IAAWU,OAnBxB,QAoBCL,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CO,IAAKF,MAAMC,gBACnD,QACFH,SAASC,eAAT,gBACWJ,EADX,YACoBO,EAAI,IACtBF,MAAMC,gBAAkB,QAxB3B,WA0BDpB,EAAS,CACPI,KAAMnB,EACNgB,MAAM,YAAKA,KAERW,IAAWI,KA9Bf,kCA+BOV,EAAyB,GAAnBM,IAAWU,OA/BxB,WAiCIV,IAAWW,SAjCf,uDAOiCF,EAPjC,0BAqCET,IAAWW,SArCb,uDAM2BrB,EAN3B,uBAyCDU,IAAWW,UACbvB,EAAS,CAAEI,KAAMlB,IA1Cd,4CAAP,qDAAM,KO+PJ8E,sBAAuB,WACrBhE,EAASwB,MAEXyC,cAAe,WACbjE,EJnQJ,uCAAO,WAAOA,EAAUY,GAAjB,+BAAAC,EAAA,sDACCZ,EADD,YACaW,IAAWX,MAAMA,OAC7BF,EAAOa,IAAWX,MAAMF,KACxBe,EAAQF,IAAWE,MACrB6F,GAAU,EACV5F,EAAO,EACTU,EAAO,EACPC,EAAQ3B,EAAO,EAPZ,WASE4G,EATF,iBAUHA,GAAU,EACDzG,EAAIuB,EAXV,YAWgBvB,EAAIwB,GAXpB,oBAYGzB,EAAMC,GAAKD,EAAMC,EAAI,KACvBa,EAAOd,EAAMC,GACbD,EAAMC,GAAKD,EAAMC,EAAI,GACrBD,EAAMC,EAAI,GAAKa,EACf4F,GAAU,IAER/F,IAAWI,KAlBd,wBAmBCC,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CZ,IAAKiB,MAAMC,gBACnD,MACFH,SAASC,eAAT,gBACWJ,EADX,YACoBZ,EAAI,IACtBiB,MAAMC,gBAAkB,MAvB3B,UAwBOd,EAAMM,IAAWU,OAxBxB,QAyBCL,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CZ,IAAKiB,MAAMC,gBACnD,QACFH,SAASC,eAAT,gBACWJ,EADX,YACoBZ,EAAI,IACtBiB,MAAMC,gBAAkB,QA7B3B,WA+BDpB,EAAS,CACPI,KAAMnB,EACNgB,MAAM,YAAKA,KAERW,IAAWI,KAnCf,kCAoCOV,EAAMM,IAAWU,OApCxB,WAsCIV,IAAWW,SAtCf,uDAW6BrB,EAX7B,4BA0CDwB,EACGiF,EA3CF,qDA8CHA,GAAU,EACDtF,EAAIK,EA/CV,aA+CiBL,EAAII,GA/CrB,oBAgDGxB,EAAMoB,GAAKpB,EAAMoB,EAAI,KACvBN,EAAOd,EAAMoB,GACbpB,EAAMoB,GAAKpB,EAAMoB,EAAI,GACrBpB,EAAMoB,EAAI,GAAKN,EACf4F,GAAU,IAER/F,IAAWI,KAtDd,wBAuDCC,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CO,IAAKF,MAAMC,gBACnD,MACFH,SAASC,eAAT,gBACWJ,EADX,YACoBO,EAAI,IACtBF,MAAMC,gBAAkB,MA3D3B,UA4DOd,EAAMM,IAAWU,OA5DxB,QA6DCL,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CO,IAAKF,MAAMC,gBACnD,QACFH,SAASC,eAAT,gBACWJ,EADX,YACoBO,EAAI,IACtBF,MAAMC,gBAAkB,QAjE3B,WAmEDpB,EAAS,CACPI,KAAMnB,EACNgB,MAAM,YAAKA,KAERW,IAAWI,KAvEf,kCAwEOV,EAAMM,IAAWN,OAxExB,WA0EIM,IAAWW,SA1Ef,uDA+C6BF,EA/C7B,0BA8EDI,EA9EC,uBAgFDb,IAAWW,UACbvB,EAAS,CAAEI,KAAMlB,IAjFd,4CAAP,qDAAM,KIqQJgF,WAAY,WACVlE,EAASuC,MAEX4B,WAAY,WACVnE,EAASgD,MAEXoB,UAAW,WACTpE,EAASiD,OAEXoB,WAAY,WACVrE,ED/QJ,uCAAO,WAAOA,EAAUY,GAAjB,mCAAAC,EAAA,sDAQL,IAPMZ,EADD,YACaW,IAAWX,MAAMA,OAC7BF,EAAOa,IAAWX,MAAMF,KACxBe,EAAQF,IAAWE,MACrB8F,EAAQ,GACRC,EAAK5G,EAAM,GACX6G,EAAI,EAEC5G,EAAI,EAAGA,EAAIH,IAAQG,EACtBD,EAAMC,GAAK2G,IACbA,EAAK5G,EAAMC,IAIN6B,EAAI,EAdR,YAcWrC,KAAKE,MAAMiH,EAAK9E,GAAK,GAdhC,iBAeH6E,EAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAEpC1G,EAAI,EAjBV,aAiBaA,EAAIH,GAjBjB,oBAkBD6G,EAAMlH,KAAKE,MAAMK,EAAMC,GAAK6B,GAAK,IAAI5B,KAAKF,EAAMC,KAC5CU,IAAWI,KAnBd,wBAoBCC,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CZ,IAAKiB,MAAMC,gBACnD,MArBH,UAsBOd,GAAMM,IAAWU,OAtBxB,QAuBCL,SAASC,eAAT,gBAAiCJ,EAAjC,YAA0CZ,IAAKiB,MAAMC,gBACnD,QAxBH,WA0BIR,IAAWW,SA1Bf,qDAiBuBrB,IAjBvB,wBA+BH4G,EAAI,EACK5G,EAAI,EAhCV,aAgCaA,EAAI,IAhCjB,iBAiCQmB,EAAI,EAjCZ,aAiCeA,EAAIuF,EAAM1G,GAAG6G,QAjC5B,qBAkCKnG,IAAWI,KAlChB,wBAmCGC,SAASC,eAAT,gBACWJ,EADX,YACoBgG,IAClB3F,MAAMC,gBAAkB,MArC7B,UAsCSd,GAAMM,IAAWU,OAtC1B,QAuCGL,SAASC,eAAT,gBACWJ,EADX,YACoBgG,IAClB3F,MAAMC,gBAAkB,QAzC7B,WA2CCnB,EAAM6G,GAAKF,EAAM1G,GAAGmB,KAClByF,EACF9G,EAAS,CAAEI,KAAMnB,EAAYgB,MAAM,YAAKA,KACnCW,IAAWI,KA9CjB,kCA+CSV,GAAMM,IAAWU,OA/C1B,WAiDMV,IAAWW,SAjDjB,uDAiCsCF,EAjCtC,2BAqDIT,IAAWW,SArDf,uDAgCuBrB,EAhCvB,2BAyDEU,IAAWW,SAzDb,qDAcmCQ,GAAK,GAdxC,uBA8DL/B,EAAS,CAAEI,KAAMnB,EAAYgB,MAAM,YAAKA,KACpCW,IAAWW,UACbvB,EAAS,CAAEI,KAAMlB,IAhEd,4CAAP,qDAAM,QCoROuH,CAGbtD,ICrRI6D,I,MAAgB,CAAC,QAAS,UAE1BC,G,iLACM,IAAD,SACiB3C,KAAKjB,MAArBpD,EADD,EACCA,MAAOF,EADR,EACQA,KACXmH,EAAc9H,OAAOC,OAAO6F,MAC5BiC,EAAWzH,KAAKE,MAAMsH,GAAsB,IAAPnH,IACrCmH,GAAe,MACjBA,GAAe,IACfC,EAAWzH,KAAKE,OAAOR,OAAOC,OAAO6F,MAAQ,MAAe,IAAPnF,KAEvD,IAAIqH,EAAa,CACflC,MAAM,GAAD,OAAKgC,EAAL,OAGP,OACE,yBAAKrC,UAAU,gBAAgB1D,MAAOiG,GACpC,yBAAKvC,UAAU,QAAQ1D,MAAOiG,GAC3BnH,EAAMoH,KAAI,SAAC9D,EAAO+D,GAAR,OACT,yBACEzC,UAAU,YACVS,GAAE,oBAAegC,GACjBC,IAAKD,EACLnG,MAAO,CACL+D,MAAM,GAAD,OAAKiC,EAAL,MACL/F,gBACE4F,GAAmC,QAArB,EAAK3D,MAAMvC,MAAkB,EAAI,GACjDxB,OAAQiE,IAGV,yBACEsB,UAAU,MACVS,GAAE,oBAAegC,GACjBnG,MAAO,CACL7B,OAAO,GAAD,OAAK6H,EAAL,MACNjC,MAAM,GAAD,OAAKiC,EAAL,MACL/F,gBAAiB4F,GAAc,gB,GAlCpBR,aAmDdC,gBANS,SAAAC,GAAK,MAAK,CAChC3G,KAAM2G,EAAMzG,MAAMF,KAClBE,MAAOyG,EAAMzG,MAAMA,MACnBa,MAAO4F,EAAM5F,SAGA2F,CAAyBQ,IC1CzBO,G,iLATX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,GAAD,MACA,kBAAC,GAAD,W,GALwBjB,a,ylBCHhC,IAAMkB,GAAe,CACnB3H,KAAML,KAAKE,OAAQR,OAAOC,OAAO6F,MAAQ,KAAO,KAAQ,IACxDjF,MAAO,ICcM0H,GATKC,aAAgB,CAClC3H,MDH0B,WAAmC,IAAlCyG,EAAiC,uDAAzBgB,GAAcG,EAAW,uCAC5D,OAAQA,EAAOzH,MACb,IdTwB,ecUtB,OAAO,GAAP,GACKsG,EADL,CAEE3G,KAAM8H,EAAOxH,QAAQN,KACrBE,MAAO4H,EAAOxH,QAAQJ,QAE1B,KAAKhB,EACH,OAAO,GAAP,GACKyH,EADL,CAEEzG,MAAO4H,EAAO5H,QAElB,QACE,OAAOyG,ICVXpF,MCT0B,WAAyB,IAAxBoF,EAAuB,uDAAf,GAAImB,EAAW,uCAClD,OAAQA,EAAOzH,MACb,IhBHwB,egBItB,OAAOyH,EAAOvG,MAChB,QACE,OAAOoF,IDKX9C,UEVyB,WAAuC,IAAtC8C,EAAqC,uDAA7B,iBAAkBmB,EAAW,uCAC/D,OAAQA,EAAOzH,MACb,IjBF4B,mBiBG1B,OAAOyH,EAAOjE,UAChB,QACE,OAAO8C,IFMXnF,SGXyB,WAA4B,IAA3BmF,EAA0B,wDAAXmB,EAAW,uCACpD,OAAQA,EAAOzH,MACb,KAAKlB,EACH,OAAQwH,EACV,QACE,OAAOA,IHOX5F,MIZwB,WAA4B,IAA3B4F,EAA0B,uDAAlB,MAAOmB,EAAW,uCACnD,OAAQA,EAAOzH,MACb,InBEwB,emBDtB,OAAOyH,EAAO/G,MAChB,QACE,OAAO4F,IJQX1F,KKbuB,WAA2B,IAA1B0F,IAAyB,yDAAXmB,EAAW,uCACjD,OAAQA,EAAOzH,MACb,IpBGuB,coBFrB,OAAOyH,EAAO7G,KAChB,QACE,OAAO0F,MCKEoB,GANQ,WAGrB,OAFcC,aAAYJ,GAAaK,aAAgBC,QCDzDC,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAON,MACf,kBAAC,GAAD,OAEF7G,SAASC,eAAe,U","file":"static/js/main.1567c1ee.chunk.js","sourcesContent":["export const ARRAY_CHANGE = \"ARRAY_CHANGE\";\r\nexport const SPEED_CHENGE = \"SPEED_CHENGE\";\r\nexport const ALGORITHM_SELECT = \"ALGORITHM_SELECT\";\r\nexport const SWAP_ARRAY = \"SWAP_ARRAY\";\r\nexport const START_SORTING = \"START_SORTING\";\r\nexport const TOGGLE_STATE = \"TOGGLE_STATE\";\r\nexport const SHAPE_CHANGE = \"SHAPE_CHANGE\";\r\nexport const MODE_CHANGE = \"MODE_CHANGE\";\r\n","import { ARRAY_CHANGE } from \"./types\";\r\n\r\nconst maxHeight = window.screen.height * 0.87;\r\n\r\nconst setArray = size => {\r\n  return dispatch => {\r\n    const array = [];\r\n    for (let i = 0; i < size; ++i) {\r\n      array.push(getRandomInt(50, maxHeight));\r\n    }\r\n\r\n    dispatch({\r\n      type: ARRAY_CHANGE,\r\n      payload: {\r\n        array: array,\r\n        size: size\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport default setArray;\r\n","import { SWAP_ARRAY, TOGGLE_STATE } from \"../types\";\r\n\r\nfunction selectionSort() {\r\n  return async (dispatch, getState) => {\r\n    const array = getState().array.array;\r\n    const size = getState().array.size;\r\n    const shape = getState().shape;\r\n    let min = 0,\r\n      temp = 0;\r\n    for (let i = 0; i < size; ++i) {\r\n      min = i;\r\n      if (getState().mode) {\r\n        document.getElementById(`array-${shape}-${min}`).style.backgroundColor =\r\n          \"green\";\r\n      }\r\n      for (let j = i + 1; j < size; ++j) {\r\n        if (getState().mode) {\r\n          document.getElementById(`array-${shape}-${j}`).style.backgroundColor =\r\n            \"red\";\r\n          await sleep(getState().speed);\r\n          document.getElementById(`array-${shape}-${j}`).style.backgroundColor =\r\n            \"white\";\r\n        }\r\n        if (array[j] < array[min]) {\r\n          if (getState().mode) {\r\n            document.getElementById(\r\n              `array-${shape}-${min}`\r\n            ).style.backgroundColor = \"white\";\r\n          }\r\n          min = j;\r\n          if (getState().mode) {\r\n            document.getElementById(\r\n              `array-${shape}-${min}`\r\n            ).style.backgroundColor = \"green\";\r\n          }\r\n        }\r\n        if (!getState().curState) {\r\n          break;\r\n        }\r\n      }\r\n      document.getElementById(`array-${shape}-${min}`).style.backgroundColor =\r\n        \"white\";\r\n      temp = array[i];\r\n      array[i] = array[min];\r\n      array[min] = temp;\r\n      await dispatch({\r\n        type: SWAP_ARRAY,\r\n        array: [...array]\r\n      });\r\n      if (!getState().mode) {\r\n        await sleep(getState().speed);\r\n      }\r\n      if (!getState().curState) {\r\n        break;\r\n      }\r\n    }\r\n    if (getState().curState) {\r\n      dispatch({ type: TOGGLE_STATE });\r\n    }\r\n  };\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default selectionSort;\r\n","import { SWAP_ARRAY, TOGGLE_STATE } from \"../types\";\r\n\r\nexport default function insertionSort() {\r\n  return async (dispatch, getState) => {\r\n    const array = [...getState().array.array];\r\n    const size = getState().array.size;\r\n    const shape = getState().shape;\r\n    let temp = 0,\r\n      j = 0;\r\n\r\n    for (let i = 1; i < size; ++i) {\r\n      j = i;\r\n\r\n      while (j > 0 && array[j] < array[j - 1]) {\r\n        if (getState().mode) {\r\n          document.getElementById(`array-${shape}-${j}`).style.backgroundColor =\r\n            \"red\";\r\n          await sleep(getState().speed);\r\n          document.getElementById(`array-${shape}-${j}`).style.backgroundColor =\r\n            \"white\";\r\n        }\r\n        temp = array[j];\r\n        array[j] = array[j - 1];\r\n        array[j - 1] = temp;\r\n        --j;\r\n        dispatch({\r\n          type: SWAP_ARRAY,\r\n          array: [...array]\r\n        });\r\n        if (getState().mode) {\r\n          await sleep(getState().speed);\r\n        }\r\n        if (!getState().curState) {\r\n          break;\r\n        }\r\n      }\r\n      dispatch({\r\n        type: SWAP_ARRAY,\r\n        array: [...array]\r\n      });\r\n      if (!getState().mode) {\r\n        await sleep(getState().speed);\r\n      }\r\n      if (!getState().curState) {\r\n        break;\r\n      }\r\n    }\r\n    if (getState().curState) {\r\n      dispatch({ type: TOGGLE_STATE });\r\n    }\r\n  };\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import { SWAP_ARRAY, TOGGLE_STATE } from \"../types\";\r\n\r\nexport default function bubbleSort() {\r\n  return async (dispatch, getState) => {\r\n    const array = [...getState().array.array];\r\n    const size = getState().array.size;\r\n    const shape = getState().shape;\r\n    let temp = 0;\r\n\r\n    for (let i = 0; i < size - 1; ++i) {\r\n      for (let j = 0; j < size - i - 1; ++j) {\r\n        if (array[j] > array[j + 1]) {\r\n          temp = array[j];\r\n          array[j] = array[j + 1];\r\n          array[j + 1] = temp;\r\n        }\r\n        if (getState().mode) {\r\n          document.getElementById(`array-${shape}-${j}`).style.backgroundColor =\r\n            \"red\";\r\n          document.getElementById(\r\n            `array-${shape}-${j + 1}`\r\n          ).style.backgroundColor = \"red\";\r\n          await sleep(getState().speed);\r\n          document.getElementById(`array-${shape}-${j}`).style.backgroundColor =\r\n            \"white\";\r\n          document.getElementById(\r\n            `array-${shape}-${j + 1}`\r\n          ).style.backgroundColor = \"white\";\r\n        }\r\n        dispatch({\r\n          type: SWAP_ARRAY,\r\n          array: [...array]\r\n        });\r\n        if (!getState().mode) {\r\n          await sleep(getState().speed * 0.5);\r\n        }\r\n        if (!getState().curState) {\r\n          break;\r\n        }\r\n      }\r\n      if (!getState().curState) {\r\n        break;\r\n      }\r\n    }\r\n    if (getState().curState) {\r\n      dispatch({ type: TOGGLE_STATE });\r\n    }\r\n  };\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import { SWAP_ARRAY, TOGGLE_STATE } from \"../types\";\r\n\r\nfunction binaryInsertionSort() {\r\n  return async (dispatch, getState) => {\r\n    const array = getState().array.array;\r\n    const size = getState().array.size;\r\n    const shape = getState().shape;\r\n    let temp = 0,\r\n      left = 0,\r\n      right = 0,\r\n      mid = 0;\r\n\r\n    for (let i = 1; i < size; ++i) {\r\n      left = 0;\r\n      right = i;\r\n\r\n      while (left < right) {\r\n        mid = Math.floor((left + right) / 2);\r\n        if (getState().mode) {\r\n          document.getElementById(\r\n            `array-${shape}-${mid}`\r\n          ).style.backgroundColor = \"red\";\r\n          await sleep(getState().speed);\r\n          document.getElementById(\r\n            `array-${shape}-${mid}`\r\n          ).style.backgroundColor = \"white\";\r\n        }\r\n        if (array[i] <= array[mid]) {\r\n          right = mid;\r\n        } else {\r\n          left = mid + 1;\r\n        }\r\n        if (!getState().curState) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      for (left; left < i; ++left) {\r\n        temp = array[left];\r\n        array[left] = array[i];\r\n        array[i] = temp;\r\n        if (getState().mode) {\r\n          document.getElementById(\r\n            `array-${shape}-${left}`\r\n          ).style.backgroundColor = \"green\";\r\n          await sleep(getState().speed);\r\n          document.getElementById(\r\n            `array-${shape}-${left}`\r\n          ).style.backgroundColor = \"white\";\r\n        }\r\n        if (!getState().curState) {\r\n          break;\r\n        }\r\n      }\r\n      dispatch({\r\n        type: SWAP_ARRAY,\r\n        array: [...array]\r\n      });\r\n      if (!getState().mode) {\r\n        await sleep(getState().speed);\r\n      }\r\n      if (!getState().curState) {\r\n        break;\r\n      }\r\n    }\r\n    if (getState().curState) {\r\n      dispatch({ type: TOGGLE_STATE });\r\n    }\r\n  };\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default binaryInsertionSort;\r\n","import { SWAP_ARRAY, TOGGLE_STATE } from \"../types\";\r\n\r\nlet dispatch, getState, shape;\r\n\r\nfunction mergeSort() {\r\n  //toDispatch = [];\r\n  return async (disp, getSt) => {\r\n    dispatch = disp;\r\n    getState = getSt;\r\n    shape = getState().shape;\r\n    const array = [...getState().array.array];\r\n    const size = getState().array.size;\r\n    await mergeSortRecur(array, 0, size - 1);\r\n    if (getState().curState) {\r\n      dispatch({ type: TOGGLE_STATE });\r\n    }\r\n    //handleDispatch(dispatch);\r\n  };\r\n}\r\n\r\nasync function mergeSortRecur(array, l, r) {\r\n  if (l < r) {\r\n    let m = Math.floor((l + r) / 2);\r\n    await mergeSortRecur(array, l, m);\r\n    if (!getState().curState) {\r\n      return;\r\n    }\r\n    await mergeSortRecur(array, m + 1, r);\r\n    if (!getState().curState) {\r\n      return;\r\n    }\r\n    await merge(array, l, m, r);\r\n    if (!getState().curState) {\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nasync function merge(array, l, m, r) {\r\n  let n1 = m - l + 1;\r\n  let n2 = r - m;\r\n\r\n  let L = new Array(n1);\r\n  let R = new Array(n2);\r\n\r\n  for (let i = 0; i < n2; ++i) {\r\n    L[i] = array[l + i];\r\n    R[i] = array[m + 1 + i];\r\n    if (getState().mode) {\r\n      document.getElementById(`array-${shape}-${l + i}`).style.backgroundColor =\r\n        \"red\";\r\n      document.getElementById(\r\n        `array-${shape}-${m + 1 + i}`\r\n      ).style.backgroundColor = \"red\";\r\n      await sleep(getState().speed);\r\n      document.getElementById(`array-${shape}-${l + i}`).style.backgroundColor =\r\n        \"white\";\r\n      document.getElementById(\r\n        `array-${shape}-${m + 1 + i}`\r\n      ).style.backgroundColor = \"white\";\r\n    }\r\n    if (!getState().curState) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (n1 !== n2) {\r\n    L[n1 - 1] = array[l + n1 - 1];\r\n  }\r\n\r\n  let i = 0,\r\n    j = 0,\r\n    k = l;\r\n  while (i < n1 && j < n2) {\r\n    if (L[i] <= R[j]) {\r\n      array[k] = L[i++];\r\n    } else {\r\n      array[k] = R[j++];\r\n    }\r\n    if (getState().mode) {\r\n      document.getElementById(`array-${shape}-${k}`).style.backgroundColor =\r\n        \"red\";\r\n      await sleep(getState().speed);\r\n      document.getElementById(`array-${shape}-${k}`).style.backgroundColor =\r\n        \"white\";\r\n    }\r\n    ++k;\r\n    dispatch({\r\n      type: SWAP_ARRAY,\r\n      array: [...array]\r\n    });\r\n    if (!getState().mode) {\r\n      await sleep(getState().speed);\r\n    }\r\n    if (!getState().curState) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  while (i < n1) {\r\n    array[k] = L[i++];\r\n    k++;\r\n    dispatch({\r\n      type: SWAP_ARRAY,\r\n      array: [...array]\r\n    });\r\n    await sleep(getState().speed);\r\n    if (!getState().curState) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  while (j < n2) {\r\n    array[k] = R[j++];\r\n    k++;\r\n    dispatch({\r\n      type: SWAP_ARRAY,\r\n      array: [...array]\r\n    });\r\n    await sleep(getState().speed);\r\n    if (!getState().curState) {\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default mergeSort;\r\n","import { SWAP_ARRAY, TOGGLE_STATE } from \"../types\";\r\n\r\nexport default function cocktailSort() {\r\n  return async (dispatch, getState) => {\r\n    const array = [...getState().array.array];\r\n    const size = getState().array.size;\r\n    const shape = getState().shape;\r\n    let swapped = true;\r\n    let temp = 0,\r\n      left = 0,\r\n      right = size - 1;\r\n\r\n    while (swapped) {\r\n      swapped = false;\r\n      for (let i = left; i < right; ++i) {\r\n        if (array[i] > array[i + 1]) {\r\n          temp = array[i];\r\n          array[i] = array[i + 1];\r\n          array[i + 1] = temp;\r\n          swapped = true;\r\n        }\r\n        if (getState().mode) {\r\n          document.getElementById(`array-${shape}-${i}`).style.backgroundColor =\r\n            \"red\";\r\n          document.getElementById(\r\n            `array-${shape}-${i + 1}`\r\n          ).style.backgroundColor = \"red\";\r\n          await sleep(getState().speed);\r\n          document.getElementById(`array-${shape}-${i}`).style.backgroundColor =\r\n            \"white\";\r\n          document.getElementById(\r\n            `array-${shape}-${i + 1}`\r\n          ).style.backgroundColor = \"white\";\r\n        }\r\n        dispatch({\r\n          type: SWAP_ARRAY,\r\n          array: [...array]\r\n        });\r\n        if (!getState().mode) {\r\n          await sleep(getState().speed);\r\n        }\r\n        if (!getState().curState) {\r\n          break;\r\n        }\r\n      }\r\n      --right;\r\n      if (!swapped) {\r\n        break;\r\n      }\r\n      swapped = true;\r\n      for (let j = right; j > left; --j) {\r\n        if (array[j] < array[j - 1]) {\r\n          temp = array[j];\r\n          array[j] = array[j - 1];\r\n          array[j - 1] = temp;\r\n          swapped = true;\r\n        }\r\n        if (getState().mode) {\r\n          document.getElementById(`array-${shape}-${j}`).style.backgroundColor =\r\n            \"red\";\r\n          document.getElementById(\r\n            `array-${shape}-${j - 1}`\r\n          ).style.backgroundColor = \"red\";\r\n          await sleep(getState().speed);\r\n          document.getElementById(`array-${shape}-${j}`).style.backgroundColor =\r\n            \"white\";\r\n          document.getElementById(\r\n            `array-${shape}-${j - 1}`\r\n          ).style.backgroundColor = \"white\";\r\n        }\r\n        dispatch({\r\n          type: SWAP_ARRAY,\r\n          array: [...array]\r\n        });\r\n        if (!getState().mode) {\r\n          await sleep(getState().sleep);\r\n        }\r\n        if (!getState().curState) {\r\n          break;\r\n        }\r\n      }\r\n      ++left;\r\n    }\r\n    if (getState().curState) {\r\n      dispatch({ type: TOGGLE_STATE });\r\n    }\r\n  };\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import { SWAP_ARRAY, TOGGLE_STATE } from \"../types\";\r\n\r\nlet dispatch, getState, shape;\r\n\r\nfunction quickSort() {\r\n  return async (disp, getSt) => {\r\n    dispatch = disp;\r\n    getState = getSt;\r\n    shape = getState().shape;\r\n    let array = [...getState().array.array];\r\n    let size = getState().array.size;\r\n    await sort(array, 0, size - 1);\r\n    if (getState().curState) {\r\n      dispatch({ type: TOGGLE_STATE });\r\n    }\r\n  };\r\n}\r\n\r\nasync function sort(array, low, high) {\r\n  if (low < high) {\r\n    let pivot = await partition(array, low, high);\r\n    if (!getState().curState) {\r\n      return;\r\n    }\r\n    await sort(array, low, pivot);\r\n    if (!getState().curState) {\r\n      return;\r\n    }\r\n    await sort(array, pivot + 1, high);\r\n    if (!getState().curState) {\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nasync function partition(array, low, high) {\r\n  let pivot = array[Math.floor((low + high) / 2)],\r\n    temp = 0,\r\n    l = low - 1,\r\n    h = high + 1;\r\n\r\n  while (true) {\r\n    do {\r\n      ++l;\r\n      if (getState().mode) {\r\n        document.getElementById(`array-${shape}-${l}`).style.backgroundColor =\r\n          \"red\";\r\n        await sleep(getState().speed);\r\n        document.getElementById(`array-${shape}-${l}`).style.backgroundColor =\r\n          \"white\";\r\n      }\r\n      if (!getState().curState) {\r\n        break;\r\n      }\r\n    } while (array[l] < pivot);\r\n    do {\r\n      --h;\r\n      if (getState().mode) {\r\n        document.getElementById(`array-${shape}-${h}`).style.backgroundColor =\r\n          \"red\";\r\n        await sleep(getState().speed);\r\n        document.getElementById(`array-${shape}-${h}`).style.backgroundColor =\r\n          \"white\";\r\n      }\r\n      if (!getState().curState) {\r\n        break;\r\n      }\r\n    } while (array[h] > pivot);\r\n    if (l >= h) {\r\n      break;\r\n    }\r\n    temp = array[l];\r\n    array[l] = array[h];\r\n    array[h] = temp;\r\n    dispatch({\r\n      type: SWAP_ARRAY,\r\n      array: [...array]\r\n    });\r\n    if (!getState().mode) {\r\n      await sleep(getState().speed);\r\n    }\r\n    if (!getState().curState) {\r\n      break;\r\n    }\r\n  }\r\n  return h;\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default quickSort;\r\n","import { SWAP_ARRAY, TOGGLE_STATE } from \"../types\";\r\n\r\nfunction heapSort() {\r\n  return async (dispatch, getState) => {\r\n    let array = [...getState().array.array];\r\n    let size = getState().array.size;\r\n    const shape = getState().shape;\r\n    let left, right, temp, j, newJ;\r\n    for (let i = Math.floor(size / 2 - 1); i >= 0; --i) {\r\n      j = newJ = i;\r\n      if (getState().mode) {\r\n        document.getElementById(`array-${shape}-${i}`).style.backgroundColor =\r\n          \"green\";\r\n      }\r\n      while (j < size) {\r\n        newJ = j;\r\n        left = j * 2 + 1;\r\n        right = j * 2 + 2;\r\n        if (left < size && array[left] > array[newJ]) {\r\n          newJ = left;\r\n          if (getState().mode) {\r\n            document.getElementById(\r\n              `array-${shape}-${left}`\r\n            ).style.backgroundColor = \"red\";\r\n          }\r\n        }\r\n\r\n        if (right < size && array[right] > array[newJ]) {\r\n          if (getState().mode) {\r\n            document.getElementById(\r\n              `array-${shape}-${left}`\r\n            ).style.backgroundColor = \"white\";\r\n          }\r\n          newJ = right;\r\n          if (getState().mode) {\r\n            document.getElementById(\r\n              `array-${shape}-${newJ}`\r\n            ).style.backgroundColor = \"red\";\r\n          }\r\n        }\r\n        if (newJ !== j) {\r\n          if (getState().mode) {\r\n            await sleep(getState().speed);\r\n\r\n            document.getElementById(\r\n              `array-${shape}-${newJ}`\r\n            ).style.backgroundColor = \"white\";\r\n          }\r\n          temp = array[j];\r\n          array[j] = array[newJ];\r\n          array[newJ] = temp;\r\n          j = newJ;\r\n          dispatch({\r\n            type: SWAP_ARRAY,\r\n            array: [...array]\r\n          });\r\n          if (!getState().mode) {\r\n            await sleep(getState().speed);\r\n          }\r\n        } else {\r\n          break;\r\n        }\r\n        if (!getState().curState) {\r\n          break;\r\n        }\r\n      }\r\n      document.getElementById(`array-${shape}-${i}`).style.backgroundColor =\r\n        \"white\";\r\n      if (!getState().curState) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (let i = size - 1; i >= 0; --i) {\r\n      temp = array[i];\r\n      array[i] = array[0];\r\n      array[0] = temp;\r\n      dispatch({\r\n        type: SWAP_ARRAY,\r\n        array: [...array]\r\n      });\r\n      if (!getState().mode) {\r\n        await sleep(getState().speed);\r\n      }\r\n      j = newJ = 0;\r\n      if (getState().mode) {\r\n        document.getElementById(`array-${shape}-${i}`).style.backgroundColor =\r\n          \"green\";\r\n      }\r\n      while (j < i) {\r\n        newJ = j;\r\n        left = j * 2 + 1;\r\n        right = j * 2 + 2;\r\n        if (getState().mode) {\r\n          document.getElementById(\r\n            `array-${shape}-${newJ}`\r\n          ).style.backgroundColor = \"red\";\r\n        }\r\n        if (left < i && array[left] > array[newJ]) {\r\n          newJ = left;\r\n        }\r\n\r\n        if (right < i && array[right] > array[newJ]) {\r\n          newJ = right;\r\n        }\r\n        if (getState().mode) {\r\n          await sleep(getState().speed);\r\n          document.getElementById(`array-${shape}-${j}`).style.backgroundColor =\r\n            \"white\";\r\n        }\r\n        if (newJ !== j) {\r\n          temp = array[j];\r\n          array[j] = array[newJ];\r\n          array[newJ] = temp;\r\n          j = newJ;\r\n          dispatch({\r\n            type: SWAP_ARRAY,\r\n            array: [...array]\r\n          });\r\n          if (!getState().mode) {\r\n            await sleep(getState().speed);\r\n          }\r\n        } else {\r\n          break;\r\n        }\r\n        if (!getState().curState) {\r\n          break;\r\n        }\r\n      }\r\n      document.getElementById(`array-${shape}-${i}`).style.backgroundColor =\r\n        \"white\";\r\n      if (!getState().curState) {\r\n        break;\r\n      }\r\n    }\r\n    if (getState().curState) {\r\n      dispatch({ type: TOGGLE_STATE });\r\n    }\r\n  };\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default heapSort;\r\n","import { SWAP_ARRAY, TOGGLE_STATE } from \"../types\";\r\n\r\nexport default function radixSort() {\r\n  return async (dispatch, getState) => {\r\n    const array = [...getState().array.array];\r\n    const size = getState().array.size;\r\n    const shape = getState().shape;\r\n    let count = [];\r\n    let mx = array[0];\r\n    let c = 0;\r\n\r\n    for (let i = 0; i < size; ++i) {\r\n      if (array[i] > mx) {\r\n        mx = array[i];\r\n      }\r\n    }\r\n\r\n    for (let m = 1; Math.floor(mx / m) > 0; m *= 10) {\r\n      count = [[], [], [], [], [], [], [], [], [], []];\r\n\r\n      for (let i = 0; i < size; i++) {\r\n        count[Math.floor(array[i] / m) % 10].push(array[i]);\r\n        if (getState().mode) {\r\n          document.getElementById(`array-${shape}-${i}`).style.backgroundColor =\r\n            \"red\";\r\n          await sleep(getState().speed);\r\n          document.getElementById(`array-${shape}-${i}`).style.backgroundColor =\r\n            \"white\";\r\n        }\r\n        if (!getState().curState) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      c = 0;\r\n      for (let i = 0; i < 10; ++i) {\r\n        for (let j = 0; j < count[i].length; ++j) {\r\n          if (getState().mode) {\r\n            document.getElementById(\r\n              `array-${shape}-${c}`\r\n            ).style.backgroundColor = \"red\";\r\n            await sleep(getState().speed);\r\n            document.getElementById(\r\n              `array-${shape}-${c}`\r\n            ).style.backgroundColor = \"white\";\r\n          }\r\n          array[c] = count[i][j];\r\n          ++c;\r\n          dispatch({ type: SWAP_ARRAY, array: [...array] });\r\n          if (!getState().mode) {\r\n            await sleep(getState().speed);\r\n          }\r\n          if (!getState().curState) {\r\n            break;\r\n          }\r\n        }\r\n        if (!getState().curState) {\r\n          break;\r\n        }\r\n      }\r\n      if (!getState().curState) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    dispatch({ type: SWAP_ARRAY, array: [...array] });\r\n    if (getState().curState) {\r\n      dispatch({ type: TOGGLE_STATE });\r\n    }\r\n  };\r\n}\r\n\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  NavDropdown,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n  ButtonGroup,\r\n  Button\r\n} from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport setArray from \"../../action/arrayAction\";\r\nimport selectionSort from \"../../action/algorithms/selectionSort\";\r\nimport insertionSort from \"../../action/algorithms/insertionSort\";\r\nimport bubbleSort from \"../../action/algorithms/bubbleSort\";\r\nimport binaryInsertionSort from \"../../action/algorithms/binaryInsertionSort\";\r\nimport cocktailSort from \"../../action/algorithms/cocktailSort\";\r\nimport mergeSort from \"../../action/algorithms/mergeSort\";\r\nimport quickSort from \"../../action/algorithms/quickSort\";\r\nimport heapSort from \"../../action/algorithms/heapSort\";\r\nimport radixSort from \"../../action/algorithms/radixSort\";\r\n\r\nimport \"./navbar.min.css\";\r\nimport { TOGGLE_STATE, SHAPE_CHANGE, MODE_CHANGE } from \"../../action/types\";\r\n\r\nclass NavBar extends Component {\r\n  componentDidMount() {\r\n    this.props.arrayChanged(this.props.size);\r\n  }\r\n\r\n  sizeChange = () => {\r\n    this.props.arrayChanged(document.getElementById(\"array_size\").value);\r\n  };\r\n\r\n  speedChange = () => {\r\n    this.props.speedChanged(document.getElementById(\"speed\").value);\r\n  };\r\n\r\n  startSelected = () => {\r\n    this.props.toggleState();\r\n    switch (this.props.algorithm) {\r\n      case \"SELECTION_SORT\":\r\n        this.props.selection_sort();\r\n        return;\r\n      case \"BUBBLE_SORT\":\r\n        this.props.bubble_sort();\r\n        return;\r\n      case \"INSERTION_SORT\":\r\n        this.props.insertion_sort();\r\n        return;\r\n      case \"BINARY_INSERTION_SORT\":\r\n        this.props.binary_insertion_sort();\r\n        return;\r\n      case \"COCKTAIL_SORT\":\r\n        this.props.cocktail_sort();\r\n        return;\r\n      case \"MERGE_SORT\":\r\n        this.props.merge_sort();\r\n        return;\r\n      case \"QUICK_SORT\":\r\n        this.props.quick_sort();\r\n        return;\r\n      case \"HEAP_SORT\":\r\n        this.props.heap_sort();\r\n        return;\r\n      case \"RADIX_SORT\":\r\n        this.props.radix_sort();\r\n        return;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { size, speed, algorithmChanged } = this.props;\r\n\r\n    return (\r\n      <Navbar\r\n        collapseOnSelect\r\n        expand=\"lg\"\r\n        bg=\"dark\"\r\n        variant=\"dark\"\r\n        className=\"navbar fixed\"\r\n      >\r\n        <Navbar.Brand href=\"\">\r\n          {\"Sorting Algorithm  \"}\r\n          <img\r\n            alt=\"\"\r\n            src=\"https://media1.tenor.com/images/d3e3bb1edd13218f434b5d2ac6d0c09e/tenor.gif\"\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top rounded-circle\"\r\n          />\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"\">Array Size</Nav.Link>\r\n            <OverlayTrigger\r\n              overlay={<Tooltip id=\"tooltip-size\">{size}</Tooltip>}\r\n            >\r\n              <input\r\n                type=\"range\"\r\n                className=\"custom-range\"\r\n                id=\"array_size\"\r\n                min=\"5\"\r\n                max={Math.floor((window.screen.width - 222) / 3.11)}\r\n                defaultValue={size}\r\n                onInput={() => this.sizeChange()}\r\n                disabled={this.props.curState}\r\n              />\r\n            </OverlayTrigger>\r\n            <Nav.Link href=\"\">Sorting Speed</Nav.Link>\r\n            <OverlayTrigger\r\n              overlay={<Tooltip id=\"tooltip-size\">+{speed}ms</Tooltip>}\r\n            >\r\n              <input\r\n                type=\"range\"\r\n                className=\"custom-range\"\r\n                id=\"speed\"\r\n                min=\"0\"\r\n                max=\"100\"\r\n                defaultValue={speed}\r\n                onInput={() => this.speedChange()}\r\n              />\r\n            </OverlayTrigger>\r\n            <NavDropdown title=\"Algorithms\" id=\"collasible-nav-dropdown\">\r\n              <NavDropdown.Item\r\n                onClick={() => algorithmChanged(\"SELECTION_SORT\")}\r\n              >\r\n                Selection Sort\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item onClick={() => algorithmChanged(\"BUBBLE_SORT\")}>\r\n                Bubble Sort\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item\r\n                onClick={() => algorithmChanged(\"INSERTION_SORT\")}\r\n              >\r\n                Insertion Sort\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item\r\n                onClick={() => algorithmChanged(\"BINARY_INSERTION_SORT\")}\r\n              >\r\n                Binary Insertion Sort\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item\r\n                onClick={() => algorithmChanged(\"COCKTAIL_SORT\")}\r\n              >\r\n                Cocktail Sort\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item onClick={() => algorithmChanged(\"MERGE_SORT\")}>\r\n                Merge Sort\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item onClick={() => algorithmChanged(\"QUICK_SORT\")}>\r\n                Quick Sort\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item onClick={() => algorithmChanged(\"HEAP_SORT\")}>\r\n                Heap Sort\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item onClick={() => algorithmChanged(\"RADIX_SORT\")}>\r\n                Radix Sort\r\n              </NavDropdown.Item>\r\n            </NavDropdown>\r\n            <ButtonGroup aria-label=\"shape\">\r\n              <Button\r\n                variant=\"dark\"\r\n                onClick={() => this.props.shapeChanged(\"bar\")}\r\n                disabled={this.props.curState}\r\n              >\r\n                Bar\r\n              </Button>\r\n              <Button\r\n                variant=\"dark\"\r\n                onClick={() => this.props.shapeChanged(\"dot\")}\r\n                disabled={this.props.curState}\r\n              >\r\n                Dot\r\n              </Button>\r\n            </ButtonGroup>\r\n            <ButtonGroup aria-label=\"mode\">\r\n              <Button\r\n                variant=\"dark\"\r\n                onClick={() => {\r\n                  this.props.modeChanged(true);\r\n                }}\r\n              >\r\n                Normal Mode\r\n              </Button>\r\n              <Button\r\n                variant=\"dark\"\r\n                onClick={() => {\r\n                  this.props.modeChanged(false);\r\n                }}\r\n              >\r\n                Kreygas Mode\r\n              </Button>\r\n            </ButtonGroup>\r\n            <ButtonGroup aria-label=\"start-stop\">\r\n              <Button\r\n                variant=\"dark\"\r\n                onClick={() => this.startSelected()}\r\n                disabled={this.props.curState}\r\n              >\r\n                Start\r\n              </Button>\r\n              <Button\r\n                variant=\"dark\"\r\n                onClick={() => this.props.toggleState()}\r\n                disabled={!this.props.curState}\r\n              >\r\n                Stop\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  array: state.array.array,\r\n  size: state.array.size,\r\n  speed: state.speed,\r\n  algorithm: state.algorithm,\r\n  curState: state.curState\r\n});\r\n\r\nconst mapDispathToProps = dispatch => {\r\n  return {\r\n    arrayChanged: size => {\r\n      dispatch(setArray(size));\r\n    },\r\n    algorithmChanged: algorithm => {\r\n      dispatch({ type: \"ALGORITHM_SELECT\", algorithm: algorithm });\r\n    },\r\n    speedChanged: speed => {\r\n      dispatch({ type: \"SPEED_CHENGE\", speed: speed });\r\n    },\r\n    shapeChanged: shape => {\r\n      dispatch({ type: SHAPE_CHANGE, shape: shape });\r\n    },\r\n    modeChanged: mode => {\r\n      dispatch({ type: MODE_CHANGE, mode: mode });\r\n    },\r\n    toggleState: () => {\r\n      dispatch({ type: TOGGLE_STATE });\r\n    },\r\n    selection_sort: () => {\r\n      dispatch(selectionSort());\r\n    },\r\n    insertion_sort: () => {\r\n      dispatch(insertionSort());\r\n    },\r\n    bubble_sort: () => {\r\n      dispatch(bubbleSort());\r\n    },\r\n    binary_insertion_sort: () => {\r\n      dispatch(binaryInsertionSort());\r\n    },\r\n    cocktail_sort: () => {\r\n      dispatch(cocktailSort());\r\n    },\r\n    merge_sort: () => {\r\n      dispatch(mergeSort());\r\n    },\r\n    quick_sort: () => {\r\n      dispatch(quickSort());\r\n    },\r\n    heap_sort: () => {\r\n      dispatch(heapSort());\r\n    },\r\n    radix_sort: () => {\r\n      dispatch(radixSort());\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispathToProps\r\n)(NavBar);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport \"./arrayContainer.css\";\r\n\r\nconst PRIMARY_COLOR = [\"white\", \"black\"];\r\n\r\nclass ArrayContainer extends Component {\r\n  render() {\r\n    const { array, size } = this.props;\r\n    let screenWidth = window.screen.width;\r\n    let barWidth = Math.floor(screenWidth / (size * 1.5));\r\n    if (screenWidth >= 768) {\r\n      screenWidth -= 244;\r\n      barWidth = Math.floor((window.screen.width - 444) / (size * 2.3));\r\n    }\r\n    let widthStyle = {\r\n      width: `${screenWidth}px`\r\n    };\r\n\r\n    return (\r\n      <div className=\"arr-container\" style={widthStyle}>\r\n        <div className=\"array\" style={widthStyle}>\r\n          {array.map((value, index) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              id={`array-bar-${index}`}\r\n              key={index}\r\n              style={{\r\n                width: `${barWidth}px`,\r\n                backgroundColor:\r\n                  PRIMARY_COLOR[this.props.shape === \"bar\" ? 0 : 1],\r\n                height: value\r\n              }}\r\n            >\r\n              <div\r\n                className=\"dot\"\r\n                id={`array-dot-${index}`}\r\n                style={{\r\n                  height: `${barWidth}px`,\r\n                  width: `${barWidth}px`,\r\n                  backgroundColor: PRIMARY_COLOR[0]\r\n                }}\r\n              ></div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  size: state.array.size,\r\n  array: state.array.array,\r\n  shape: state.shape\r\n});\r\n\r\nexport default connect(mapStateToProps)(ArrayContainer);\r\n","import React, { Component } from \"react\";\r\n\r\nimport NavBar from \"./components/Navbar/navbar.jsx\";\r\nimport ArrayContainer from \"./components/ArrayContainer/arrayContainer\";\r\n\r\nclass VirtualizationApp extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar />\r\n        <ArrayContainer />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VirtualizationApp;\r\n","import { ARRAY_CHANGE, SWAP_ARRAY } from \"../action/types\";\r\n\r\nconst initialState = {\r\n  size: Math.floor(((window.screen.width - 222) / 3.33) * 0.5),\r\n  array: []\r\n};\r\n\r\nexport const arrayReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ARRAY_CHANGE:\r\n      return {\r\n        ...state,\r\n        size: action.payload.size,\r\n        array: action.payload.array\r\n      };\r\n    case SWAP_ARRAY:\r\n      return {\r\n        ...state,\r\n        array: action.array\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport { arrayReducer } from \"./array\";\r\nimport { algoReducer } from \"./algorithm\";\r\nimport { speedReducer } from \"./speed\";\r\nimport { toggleState } from \"./currenState\";\r\nimport { shapeState } from \"./shape\";\r\nimport { modeState } from \"./mode\";\r\n\r\nconst rootReducer = combineReducers({\r\n  array: arrayReducer,\r\n  speed: speedReducer,\r\n  algorithm: algoReducer,\r\n  curState: toggleState,\r\n  shape: shapeState,\r\n  mode: modeState\r\n});\r\n\r\nexport default rootReducer;\r\n","import { SPEED_CHENGE } from \"../action/types\";\r\n\r\nexport const speedReducer = (state = 50, action) => {\r\n  switch (action.type) {\r\n    case SPEED_CHENGE:\r\n      return action.speed;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ALGORITHM_SELECT } from \"../action/types\";\r\n\r\nexport const algoReducer = (state = \"SELECTION_SORT\", action) => {\r\n  switch (action.type) {\r\n    case ALGORITHM_SELECT:\r\n      return action.algorithm;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { TOGGLE_STATE } from \"../action/types\";\r\n\r\nexport const toggleState = (state = false, action) => {\r\n  switch (action.type) {\r\n    case TOGGLE_STATE:\r\n      return !state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { SHAPE_CHANGE } from \"../action/types\";\r\n\r\nexport const shapeState = (state = \"bar\", action) => {\r\n  switch (action.type) {\r\n    case SHAPE_CHANGE:\r\n      return action.shape;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { MODE_CHANGE } from \"../action/types\";\r\n\r\nexport const modeState = (state = true, action) => {\r\n  switch (action.type) {\r\n    case MODE_CHANGE:\r\n      return action.mode;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, applyMiddleware } from \"redux\";\r\n\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport rootReducer from \"./reducers/index\";\r\n\r\nconst configureStore = () => {\r\n  const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport VirtualizationApp from \"./virtualizationApp\";\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"./store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={configureStore()}>\r\n    <VirtualizationApp />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}